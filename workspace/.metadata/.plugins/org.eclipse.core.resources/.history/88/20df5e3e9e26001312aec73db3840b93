package differentialEvolution;

import java.io.*;
import java.util.Scanner;

public class DE {
	final static int POPSIZE = 500;
	final static int MAXGENS = 10000;
	final static int dim = 2;
	static Genotype best;
	public static void init(Genotype[] population) throws FileNotFoundException{
		double lbound;
		double ubound;
		Scanner input = new Scanner(new File("/home/ryan/bound.txt"));		
		for(int i = 0;i < Genotype.NVARS;i++){
			lbound = input.nextDouble();
			ubound = input.nextDouble();
			System.out.println(lbound);
			System.out.println(ubound);
			for(int j = 0;j < POPSIZE;j++){
				population[j].fitness = 0.0;
				//population[j].cfitness = 0;
				//population[j].rfitness = 0;
				population[j].lower[i] = lbound;
				population[j].upper[i] = ubound;
				population[j].gene[i] = Math.random() * 
						(population[j].upper[i] - population[j].lower[i]) + 
						population[j].lower[i];
			}
		}
		input.close();
		/*
		PrintWriter output = new PrintWriter(new File("/home/ryan/output.txt"));
		for(int i = 0;i < POPSIZE;i++){
			output.printf("Pop  %f %f %f\n",population[i].gene[0],population[i].gene[1],population[i].fitness);
			//output.printf("MidPop  %f %f %f\n",MidPop[i].gene[0],MidPop[i].gene[1],MidPop[i].fitness);
		}
		output.close();
		*/
	}
	public static void evaluate(Genotype[] population){
		for(int i = 0;i < POPSIZE;i++){
			double x1 = population[i].gene[0];
			double x2 = population[i].gene[1];
			population[i].fitness = 21.5 + x1 * Math.sin(4*Math.PI*x1)+x2*Math.sin(20*Math.PI*x2);
			//System.out.printf("popsize %d fitness %f \n",i,population[i].fitness);
		}
	}
	public static void select(Genotype[] population,Genotype[] MidPop) throws CloneNotSupportedException{
		for(int i = 0;i < POPSIZE;i++)
			if(MidPop[i].fitness > population[i].fitness){
				population[i] = (Genotype) MidPop[i].clone();
				
			}
	}
	public static void keepTheBest(Genotype[] population) throws CloneNotSupportedException{
		double bestf;
		int index;
		if(best == null)
		{
			bestf = population[0].fitness;
			index = 0;
		}
		else{
			bestf = best.fitness;
			index = -1;
		}
		for(int i = 1;i < POPSIZE;i++){
			if(bestf < population[i].fitness){
				bestf = population[i].fitness;
				index = i;
			}			
		}
		if(index != -1)
			best = (Genotype) population[index].clone();
	}
	public static void mutate(Genotype[] population,Genotype[] MidPop) throws CloneNotSupportedException{
		for(int i = 0;i < POPSIZE;i++){			
				int temp = (int)(POPSIZE * Math.random());
				if(temp == POPSIZE)
					temp--;
				Genotype temp1 = (Genotype) population[temp].clone();
				temp = (int)(POPSIZE * Math.random()); 
				if(temp == POPSIZE)
					temp--;
				Genotype temp2 = (Genotype) population[temp].clone();
			for(int j = 0;j < Genotype.NVARS;j++){
				MidPop[i].gene[j] = population[i].gene[j] + Genotype.SCALE * 
										(temp1.gene[j] - temp2.gene[j]);
				if(MidPop[i].gene[j] < MidPop[i].lower[j] || MidPop[i].gene[j] > MidPop[i].upper[j])
					MidPop[i].gene[j] = Math.random() * (MidPop[i].upper[j] - MidPop[i].lower[j])
										+ MidPop[i].lower[j];
			}
		}
	}
	public static void cross(Genotype[] population,Genotype[] MidPop){
		for(int i = 0;i < POPSIZE;i++){
			int jrand = (int) (Math.random() * Genotype.NVARS);
			if(jrand == Genotype.NVARS)
				jrand--;
			for(int j = 0;j < Genotype.NVARS;j++){
				if(Math.random() > Genotype.PXOVER && j != jrand){
					MidPop[i].gene[j] = population[i].gene[j];
				}
			}
		}
	}
	public static void main(String[] args) throws FileNotFoundException, CloneNotSupportedException{
		System.out.println("sjfklsd");
		/*Genotype[] population= new Genotype[POPSIZE+1];
		//Genotype[] newPopulation = new Genotype[POPSIZE+1];
		Genotype[] MidPop = new Genotype[POPSIZE+1];
		best = null;
 		for(int i = 0;i <= POPSIZE;i++){
 			population[i] = new Genotype(dim);
 			MidPop[i] = new Genotype(dim);
 		}
		
		init(population);
		int generation = 0;
		while(generation < MAXGENS){
			generation++;
			System.out.println(generation);
			mutate(population,MidPop);
			cross(population,MidPop);
			evaluate(population);
			keepTheBest(population);
			evaluate(MidPop);
			select(population,MidPop);
			
		}
		//PrintWriter output = new PrintWriter(new File("/home/ryan/output.txt"));
		/*for(int i = 0;i < POPSIZE;i++){
			output.printf("Pop  %f %f %f\n",population[i].gene[0],population[i].gene[1],population[i].fitness);
			output.printf("MidPop  %f %f %f\n",MidPop[i].gene[0],MidPop[i].gene[1],MidPop[i].fitness);
		}*/
		//output.close();
		//System.out.println(best.fitness);
		
		Genotype a = new Genotype(dim);
		//Genotype b = new Genotype(dim);
		a.fitness = 30;
		a.gene[1] = 23;
		Genotype b = (Genotype) a.clone();
		b.fitness = 50;
		b.gene[1] = 24;
		System.out.printf("%f %f %f %f",a.fitness,b.fitness,a.gene[1],b.gene[1]);
	}
}
